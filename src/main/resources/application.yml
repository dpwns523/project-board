debug: false
management:
  endpoints:
    web:
      exposure:
        include: "*"

logging:
  level:
    com.dpwns.projectboard: debug
    org.springframework.web.servlet: debug
    org.hibernate.type.descriptor.sql.BasicBinder: trace

spring:
  datasource:
#    url: jdbc:mysql://localhost:3306/board
    url: ${LOCAL_DB_URL}
    username: ${LOCAL_DB_USERNAME}
    password: ${LOCAL_DB_PASSWORD}
#    dirver-class-name: com.mysql.cj.jdbc.Driver // auto
  jpa:
    defer-datasource-initialization: true
    hibernate:
      ddl-auto: create
    open-in-view: false
    show-sql: true
    properties:
      hibernate.format_sql: true
      hibernate.default_batch_fetch_size: 100
  sql.init.mode: always

  data:
    rest:
      base-path: /api
      detection-strategy: annotated
  thymeleaf3.decoupled-logic: true
  security:
    oauth2:
      client:
        registration:
          kakao:
            client-id: ${KAKAO_OAUTH_CLIENT_ID}
            client-secret: ${KAKAO_OAUTH_CLIENT_SECRET}  
            authorization-grant-type: authorization_code  # 사용자 권한 인증 방식 중 하나
            redirect-uri: "{baseUrl}/login/oauth2/code/kakao"  # 인증 시 redirect 되는 주소
            client-authentication-method: POST  # 클라이언트 인증 시 사용할 메서드
        provider: # 사용자 정보를 카카오 uri OAuth 서버로 호출해서 가져오는 것
          kakao:
            authorization-uri: https://kauth.kakao.com/oauth/authorize  # 권한을 알 떄 필요한 Uri
            token-uri: https://kauth.kakao.com/oauth/token  # token을 발급받을 때 필요한 uri
            user-info-uri: https://kapi.kakao.com/v2/user/me   # user 정보 uri, Oauth 서버로부터 가져오는 uri, db에 저장하지 않고..
            user-name-attribute: id # user name을 확인하기 위한 식별자 -> json에서의 attribute를 지정


---
spring:
  config:
    activate:
      on-profile: heroku
  datasource:
    url: ${JAWSDB_URL}
    driver-class-name: com.mysql.cj.jdbc.Driver
  jpa:
    hibernate:
      ddl-auto: create
  sql.init.mode: always

---

spring:
  config.activate.on-profile: test
  datasource.url: jdbc:h2:mem:testdb